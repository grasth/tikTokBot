import os, re, configparser, requests
import random
import threading

from aiogram import Bot, types
from aiogram.dispatcher import Dispatcher, FSMContext
from aiogram.utils import executor
import re
import time
import requests
from bs4 import BeautifulSoup
from aiogram.utils.helper import Helper, HelperMode, ListItem
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.types import ReplyKeyboardRemove, ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, \
    InlineKeyboardButton
import urllib.request
from tiktok_downloader import snaptik
import sys
import urllib
import requests
from bs4 import BeautifulSoup

bot = Bot(token=sys.argv[1])
dp = Dispatcher(bot, storage=MemoryStorage())


def download_video(video_url, name):
    r = requests.get(video_url, allow_redirects=True)
    content_type = r.headers.get('content-type')
    if content_type == 'video/mp4':
        open(f'./videos/video{name}.mp4', 'wb').write(r.content)
    else:
        pass


if not os.path.exists('videos'):
    os.makedirs('videos')


@dp.message_handler(commands=['bibometr'])
async def start_command(message: types.Message):
    size1 = random.randint(-20, 20)
    size2 = random.randint(0, 9)
    biba = "8"
    for i in range(abs(int(size1 / 2))):
        biba = biba + "="
    biba += "D"
    if size1 < 1:
        await message.reply(str(abs(size1)) + " —Å–º –≤ –∂–æ–ø–µ üò≥" + "\n" + biba)
    else:
        await message.reply("–¢–≤–æ–π —Å—Ç—Ä—É—á–æ–∫: " + str(size1) + " —Å–º üòé" + "\n" + biba)


@dp.message_handler(commands=['all'])
async def ping(m):
    if not os.path.exists(str(m.chat.id).strip().replace('-', '') + '.txt'):
        f = open(str(m.chat.id).strip().replace('-', '') + '.txt', 'w')
        f.writelines(m.from_user.username)
        f.close()
        await m.reply('–î–æ–±–∞–≤–ª–µ–Ω—ã –≤ —Å–ø–∏—Å–æ–∫')
    else:
        f = open(str(m.chat.id).strip().replace('-', '') + '.txt', 'r')
        if m.from_user.username in f.read():
            msg = ''
            f.seek(0)
            for line in f.read().splitlines():
                msg = msg + ' @' + line
            await m.reply(msg)
        else:
            f.close()
            f = open(str(m.chat.id).strip().replace('-', '') + '.txt', 'a+')
            f.writelines('\n' + m.from_user.username)
            f.close()
            m.reply('–î–æ–±–∞–≤–ª–µ–Ω—ã –≤ —Å–ø–∏—Å–æ–∫')


@dp.message_handler(commands=['weather'])
async def getWeather(message: types.Message):
    try:
        resultMessage = ""
        headers = {
            'user agent': "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) "
                          "Chrome/98.0.4758.102 Safari/537.36"}  # Headers –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞
        url = "https://weather.com/ru-RU/weather/today/l/f2312a9747951a5ddc2e2678f4d7519282e4448dc9bea0157e8f805abb4e4043"
        html = requests.get(url, headers)  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å
        soup = BeautifulSoup(html.content, 'html.parser')  # –ü–æ–ª—É—á–∞–µ–º html —Å—Ç—Ä–∞–Ω–∏—Ü—É
        ParsedWeather = soup.findAll("span", {"class": "CurrentConditions--tempValue--3a50n"})
        resultMessage += "–ò–∂–µ–≤—Å–∫\n" + str(ParsedWeather[0]).replace(
            "<span class=\"CurrentConditions--tempValue--3a50n\" data-testid=\"TemperatureValue\">", "").replace(
            "</span>", "") + ", "
        ParsedCondition = soup.findAll("div", {"class": "CurrentConditions--phraseValue--2Z18W"})
        resultMessage += str(ParsedCondition[0]).replace(
            "<div class=\"CurrentConditions--phraseValue--2Z18W\" data-testid=\"wxPhrase\">", "").replace("</div>",
                                                                                                          "")
        await message.answer(resultMessage)
    except Exception as e:
        await bot.send_message(chat_id=message.chat.id, text='–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑')


@dp.message_handler(content_types=['text'])
async def text(message: types.Message):
    regxp = re.compile(
        "(?:(?:https?|ftp):\/\/|\b(?:[a-z\d]+\.))(?:(?:[^\s()<>]+|\((?:[^\s()<>]+|(?:\([^\s()<>]+\)))?\))+(?:\((?:[^\s()<>]+|(?:\(?:[^\s()<>]+\)))?\)|[^\s`!()\[\]{};:'\".,<>?¬´¬ª‚Äú‚Äù‚Äò‚Äô]))?")
    link = regxp.findall(message.text)
    headers = {
        'user agent': "Mozilla/5.0 (Windows NT 10.0; WOW64) "
                      "AppleWebKit/537.36 (KHTML, like Gecko) "
                      "Chrome/91.0.4472.135 Safari/537.36"
    }
    if len(link) > 0:
        print("[" + message.from_user.username + "] –ø–æ–ª—É—á–µ–Ω–∞ —Å—Å—ã–ª–∫–∞: " + link[0])
        if 'tiktok' in str(link[0]).lower():
            video_url = message.text

            try:
                snaptik(video_url).get_media()[0].download(f"./videos/result_{message.from_user.id}.mp4")
                path = f'./videos/result_{message.from_user.id}.mp4'
                with open(f'./videos/result_{message.from_user.id}.mp4', 'rb') as file:
                    await bot.send_video(
                        chat_id=message.chat.id,
                        video=file,
                        reply_to_message_id=message.message_id
                    )
                os.remove(path)
            except Exception as e:
                await bot.send_message(chat_id=message.chat.id, text=str(type(e)))
                await bot.send_message(chat_id=message.chat.id, text=str(e.args))
                # await bot.send_message(chat_id=message.chat.id, text='–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏, –Ω–µ–≤–µ—Ä–Ω–∞—è —Å—Å—ã–ª–∫–∞, –≤–∏–¥–µ–æ –±—ã–ª–æ —É–¥–∞–ª–µ–Ω–æ –∏–ª–∏ —è –µ–≥–æ –Ω–µ –Ω–∞—à–µ–ª.')
    elif message.text[0] == '$':
        try:
            resultMessage = ""
            headers = {
                'user agent': "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) "
                              "Chrome/98.0.4758.102 Safari/537.36"}  # Headers –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞

            user = message.text.replace('$', '')
            ticker = user.upper()  # –ü–µ—Ä–µ–≤–æ–¥ –≤ –≤–µ—Ä—Ö–Ω–∏–π —Ä–µ–≥–∏—Å—Ç—Ä –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
            if ticker == "BTC":
                fullUrl = "https://ru.investing.com/crypto/bitcoin/btc-usd"
                html = requests.get(fullUrl, headers)  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å
                soup = BeautifulSoup(html.content, 'html.parser').decode()  # –ü–æ–ª—É—á–∞–µ–º html —Å—Ç—Ä–∞–Ω–∏—Ü—É
                pricePattern = re.compile(
                    "<span class=\"text-2xl\" data-test=\"instrument-price-last\">([\w\d.,]+)</span>")
                price = re.findall(pricePattern, soup)
                resultMessage += "–¶–µ–Ω–∞ –∑–∞ —à—Ç—É–∫—É: " + str(price[0]).replace("['", "").replace(",", ".").replace("']",
                                                                                                               "") + " USD\n"

                # if positiveProfitPattern == true:
                #     resultMessage += "–î–≤–∏–∂–µ–Ω–∏–µ —Ü–µ–Ω—ã –∑–∞ –¥–µ–Ω—å: " + "+" + positiveProfitPattern
                # else: resultMessage += "–î–≤–∏–∂–µ–Ω–∏–µ —Ü–µ–Ω—ã –∑–∞ –¥–µ–Ω—å: " + "-" + negativeProfitPattern
            elif ticker == "USD":
                fullUrl = "https://bcs-express.ru/kotirovki-i-grafiki/usd000utstom"  # –°—Å—ã–ª–∫–∞ –Ω–∞ –∑–∞–ø—Ä–æ—Å
                html = requests.get(fullUrl, headers)  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å
                soup = BeautifulSoup(html.content, 'html.parser').decode()  # –ü–æ–ª—É—á–∞–µ–º html —Å—Ç—Ä–∞–Ω–∏—Ü—É
                pricePattern = re.compile(
                    "<div class=\"quote-head__price-value js-quote-head-price js-price-close\">([\d,.]+)</div>")  # Regexp –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω—ã
                price = re.findall(pricePattern, soup)  # –ù–∞—Ö–æ–¥–∏–º –ø–æ —Ä–µ–≥—É–ª—è—Ä–∫–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Ü–µ–Ω—É
                profitPattern = re.compile(
                    "js-profit-percent\">([-+\w,%]+)</div>")  # Regexp –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏—Ç–∞ –∑–∞ –¥–µ–Ω—å
                profit = str(re.findall(profitPattern, soup))  # –ù–∞—Ö–æ–¥–∏–º –ø–æ —Ä–µ–≥—É–ª—è—Ä–∫–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏—Ç–∞ –∑–∞ –¥–µ–Ω—å
                resultMessage += "–¶–µ–Ω–∞ –∑–∞ —à—Ç—É–∫—É: " + str(price[0]) + " RUB" + "\n"
                resultMessage += "–î–≤–∏–∂–µ–Ω–∏–µ —Ü–µ–Ω—ã –∑–∞ –¥–µ–Ω—å: " + str(
                    profit.replace("['", "").replace(",", ".").replace("']", "")) + "\n"
            elif ticker == "EUR":
                fullUrl = "https://bcs-express.ru/kotirovki-i-grafiki/eur_rub__tom"  # –°—Å—ã–ª–∫–∞ –Ω–∞ –∑–∞–ø—Ä–æ—Å
                html = requests.get(fullUrl, headers)  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å
                soup = BeautifulSoup(html.content, 'html.parser').decode()  # –ü–æ–ª—É—á–∞–µ–º html —Å—Ç—Ä–∞–Ω–∏—Ü—É
                pricePattern = re.compile(
                    "<div class=\"quote-head__price-value js-quote-head-price js-price-close\">([\d,.]+)</div>")  # Regexp –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω—ã
                price = re.findall(pricePattern, soup)  # –ù–∞—Ö–æ–¥–∏–º –ø–æ —Ä–µ–≥—É–ª—è—Ä–∫–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Ü–µ–Ω—É
                profitPattern = re.compile(
                    "js-profit-percent\">([-+\w,%]+)</div>")  # Regexp –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏—Ç–∞ –∑–∞ –¥–µ–Ω—å
                profit = str(re.findall(profitPattern, soup))  # –ù–∞—Ö–æ–¥–∏–º –ø–æ —Ä–µ–≥—É–ª—è—Ä–∫–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏—Ç–∞ –∑–∞ –¥–µ–Ω—å
                resultMessage += "–¶–µ–Ω–∞ –∑–∞ —à—Ç—É–∫—É: " + str(price[0]) + " RUB" + "\n"
                resultMessage += "–î–≤–∏–∂–µ–Ω–∏–µ —Ü–µ–Ω—ã –∑–∞ –¥–µ–Ω—å: " + str(
                    profit.replace("['", "").replace(",", ".").replace("']", "")) + "\n"
            elif ticker != "":
                fullUrl = "https://bcs-express.ru/kotirovki-i-grafiki/" + ticker  # –°—Å—ã–ª–∫–∞ –Ω–∞ –∑–∞–ø—Ä–æ—Å
                html = requests.get(fullUrl, headers)  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å
                soup = BeautifulSoup(html.content, 'html.parser').decode()  # –ü–æ–ª—É—á–∞–µ–º html —Å—Ç—Ä–∞–Ω–∏—Ü—É
                pricePattern = re.compile("js-price-close\">([\d,]+)</div>")  # Regexp –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω—ã
                symbolPattern = re.compile("js-currency-code\">(\w+)</div>")  # Regexp –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤–∞–ª—é—Ç—ã
                profitPattern = re.compile(
                    "js-profit-percent\">([-+\w,%]+)</div>")  # Regexp –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏—Ç–∞ –∑–∞ –¥–µ–Ω—å
                profit = str(re.findall(profitPattern, soup))  # –ù–∞—Ö–æ–¥–∏–º –ø–æ —Ä–µ–≥—É–ª—è—Ä–∫–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏—Ç–∞ –∑–∞ –¥–µ–Ω—å
                symbol = str(re.findall(symbolPattern, soup)[0])  # –ù–∞—Ö–æ–¥–∏–º –ø–æ —Ä–µ–≥—É–ª—è—Ä–∫–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤–∞–ª—é—Ç—ã
                price = str(re.findall(pricePattern, soup)[0]).replace(",",
                                                                       ".") + " " + symbol  # –ù–∞—Ö–æ–¥–∏–º –ø–æ —Ä–µ–≥—É–ª—è—Ä–∫–µ –∏ –ø–æ–ª—É—á–∞–µ–º —Ü–µ–Ω—É —Å–æ –∑–Ω–∞–∫–æ–º –≤–∞–ª—é—Ç—ã
                resultMessage += "–¶–µ–Ω–∞ –∑–∞ —à—Ç—É–∫—É: " + price + "\n"
                resultMessage += "–î–≤–∏–∂–µ–Ω–∏–µ —Ü–µ–Ω—ã –∑–∞ –¥–µ–Ω—å: " + str(
                    profit.replace("['", "").replace(",", ".").replace("']", "")) + "\n"
            else:
                resultMessage += "–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑" + "\n"
            await bot.send_message(chat_id=message.chat.id, text=resultMessage)
        except Exception as e:
            await bot.send_message(chat_id=message.chat.id, text='–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑')


def checkPostsLoop():
    url = "https://vk.com/club210849292"
    print("–ü–∞—Ä—Å–∏–Ω–≥ –∏–¥–µ—Ç —Å " + url)
    html = requests.get(url)

    soup = BeautifulSoup(html.content, 'html.parser')

    r = requests.get(url)
    temp = r.content.decode()

    postIdPattern = re.compile("data-post-id=\"([\d_-]+)\" ")
    postId = re.findall(postIdPattern, temp)

    with open("temp.txt", "w") as file:
        file.write(postId[0])  # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ —Ñ–∞–π–ª id –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø–æ—Å—Ç–∞

    with open("temp.txt", "r") as file:
        postIdFromFile = file.read()

    while postId[0] == postIdFromFile:
        html = requests.get(url)
        soup = BeautifulSoup(html.content, 'html.parser')
        r = requests.get(url)
        temp = r.content.decode()

        postIdPattern = re.compile("data-post-id=\"([\d_-]+)\" ")
        postId = re.findall(postIdPattern, temp)

        with open("temp.txt", "r") as file:
            postIdFromFile = file.read()
            print("–ø–æ—Å—Ç –∏–∑ —Ñ–∞–π–ª–∞: " + postIdFromFile)
    print("–ù–∞–π–¥–µ–Ω –Ω–æ–≤—ã–π –ø–æ—Å—Ç! –ï–≥–æ id: " + postId[0])

    urlToPost = "https://vk.com/wall" + postId[0]
    html = requests.get(url)
    soup = BeautifulSoup(html.content, 'html.parser')
    r = requests.get(url)
    temp = r.content.decode()

    headPattern = re.compile(">([\w\s%$#&;+.,]+)<br\/>")
    head = re.findall(headPattern, temp)

    print(str(head[0]).replace("&#8381;", "‚ÇΩ").replace("&#33;", ""))
    print("–ü–æ–ª–Ω–∞—è –≤–µ—Ä—Å–∏—è –Ω–∞ –ø–æ—Å—Ç: " + urlToPost)


    threading.Timer(5, checkPostsLoop).start()


@dp.message_handler(commands=['set'])
async def set_default_commands(dp):
    await dp.bot.set_my_commands([
        types.BotCommand("all", "–ü–∏–Ω–≥–∞–Ω—É—Ç—å –≤—Å–µ—Ö"),
        types.BotCommand("bibometr", "–£–∑–Ω–∞—Ç—å —Ä–∞–∑–º–µ—Ä –∞–≥—Ä–µ–≥–∞—Ç–∞"),
        types.BotCommand("weather", "–£–∑–Ω–∞—Ç—å –ø–æ–≥–æ–¥—É")
    ])


if __name__ == "__main__":
    checkPostsLoop()
    executor.start_polling(dp, skip_updates=True)

