import os, re, configparser, requests
import random

from aiogram import Bot, types
from aiogram.dispatcher import Dispatcher, FSMContext
from aiogram.utils import executor
from aiogram.utils.helper import Helper, HelperMode, ListItem
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.types import ReplyKeyboardRemove, ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
import urllib.request
from tiktok_downloader import snaptik
import sys
import urllib
import requests
from bs4 import BeautifulSoup

bot = Bot(token=sys.argv[1])
dp = Dispatcher(bot, storage=MemoryStorage())

def download_video(video_url, name):
    r = requests.get(video_url, allow_redirects=True)
    content_type = r.headers.get('content-type')
    if content_type == 'video/mp4':
        open(f'./videos/video{name}.mp4', 'wb').write(r.content)
    else:
        pass

if not os.path.exists('videos'):
    os.makedirs('videos')

@dp.message_handler(commands=['bibometr'])
async def start_command(message: types.Message):
    size1 = random.randint(-20,20)
    size2 = random.randint(0, 9)
    biba = "8"
    for i in range(abs(int(size1/2))):
        biba = biba + "="
    biba += "D"
    if size1 < 1:
        await message.reply(str(abs(size1)) + " —Å–º –≤ –∂–æ–ø–µ üò≥" + "\n" + biba)
    else:
        await message.reply("–¢–≤–æ–π —Å—Ç—Ä—É—á–æ–∫: " + str(size1) + " —Å–º üòé" + "\n" + biba)

@dp.message_handler(commands=['all'])
async def ping(m):
    if not os.path.exists(str(m.chat.id).strip().replace('-', '') + '.txt'):
        f = open(str(m.chat.id).strip().replace('-', '') + '.txt', 'w')
        f.writelines(m.from_user.username)
        f.close()
        await m.reply('–î–æ–±–∞–≤–ª–µ–Ω—ã –≤ —Å–ø–∏—Å–æ–∫')
    else:
        f = open(str(m.chat.id).strip().replace('-', '') + '.txt', 'r')
        if m.from_user.username in f.read():
            msg = ''
            f.seek(0)
            for line in f.read().splitlines():
                msg = msg + ' @' + line
            await m.reply(msg)
        else:
            f.close()
            f = open(str(m.chat.id).strip().replace('-', '') + '.txt', 'a+')
            f.writelines('\n' + m.from_user.username)
            f.close()
            m.reply('–î–æ–±–∞–≤–ª–µ–Ω—ã –≤ —Å–ø–∏—Å–æ–∫')





@dp.message_handler(content_types=['text'])
async def text(message: types.Message):
    regxp = re.compile(
        "(?:(?:https?|ftp):\/\/|\b(?:[a-z\d]+\.))(?:(?:[^\s()<>]+|\((?:[^\s()<>]+|(?:\([^\s()<>]+\)))?\))+(?:\((?:[^\s()<>]+|(?:\(?:[^\s()<>]+\)))?\)|[^\s`!()\[\]{};:'\".,<>?¬´¬ª‚Äú‚Äù‚Äò‚Äô]))?")
    link = regxp.findall(message.text)
    headers = {
        'user agent': "Mozilla/5.0 (Windows NT 10.0; WOW64) "
                      "AppleWebKit/537.36 (KHTML, like Gecko) "
                      "Chrome/91.0.4472.135 Safari/537.36"
    }
    if len(link) > 0:
        print("[" + message.from_user.username +"] –ø–æ–ª—É—á–µ–Ω–∞ —Å—Å—ã–ª–∫–∞: " + link[0])
        if 'tiktok' in str(link[0]).lower():
            video_url = message.text

            try:
                snaptik(video_url).get_media()[0].download(f"./videos/result_{message.from_user.id}.mp4")
                path = f'./videos/result_{message.from_user.id}.mp4'
                with open(f'./videos/result_{message.from_user.id}.mp4', 'rb') as file:
                    await bot.send_video(
                        chat_id=message.chat.id,
                        video=file,
                        reply_to_message_id=message.message_id
                        )
                os.remove(path)
            except Exception as e:
                await bot.send_message(chat_id=message.chat.id, text=str(type(e)))
                await bot.send_message(chat_id=message.chat.id, text=str(e.args))   
                #await bot.send_message(chat_id=message.chat.id, text='–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏, –Ω–µ–≤–µ—Ä–Ω–∞—è —Å—Å—ã–ª–∫–∞, –≤–∏–¥–µ–æ –±—ã–ª–æ —É–¥–∞–ª–µ–Ω–æ –∏–ª–∏ —è –µ–≥–æ –Ω–µ –Ω–∞—à–µ–ª.')
    elif message.text[0] == '$':
        try:
            resultMessage = ''
            ticker = (message.text).replace('$', '')
            print(ticker)
            ticker = ticker.upper()
            curren = ['EUR', 'USD']
            print(ticker in curren)
            if ticker in curren:
                urlOfTicker = "https://invest.yandex.ru/catalog/currency/" + ticker
                html = requests.get(urlOfTicker, headers)

                soup = BeautifulSoup(html.content, 'html.parser')
                csrf_token_pattern = re.compile('window.__CSRF_TOKEN__ = \"([\w\d:]+)\";')
                reqot_token_pattern = re.compile(',reqid:\'([\d\w]+)\',')

                csrf = re.findall(csrf_token_pattern, soup.decode())
                reqid = re.findall(reqot_token_pattern, soup.decode())

                url = urlOfTicker

                headers = {
                    "Host": "invest.yandex.ru",
                    "Connection": "keep-alive",
                    "Content-Length": "509",
                    "Origin": "https://invest.yandex.ru",
                    "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/98.0.4758.102 Safari/537.36",
                    "Content-Type": "application/json",
                    "Accept": "*/*",
                    "Accept-Encoding": "gzip, deflate, br",
                    "Accept-Language": "ru,en-US;q=0.9,en;q=0.8",
                    "x-csrf-token": str(csrf),
                    "x-ssr-id": str(reqid),
                }
                r = requests.get(url, headers)
                temp = r.content.decode()

                plusOrMinus = re.compile("<div class=\"rzv7e6OPChq71rCQBr9H _9RS0xgK34zINnxUjOgH\"><span>(\D+\d+\D\d*\s+\D)</span><span>(\d+\D\d+\s+%)")

                plOrMin = re.findall(plusOrMinus, temp)

                pattern2 = re.compile("‚ÇΩ<\/span><span>([\d,]+)‚ÄØ‚ÄØ%<\/span><\/div>")
                match = re.findall(pattern2, temp)
                result = (str(match))
                print(plOrMin[0][0][0])

                symbol = '‚ÇΩ'
                pattern = re.compile("bolbtRDz491tDq6jfmHd\">([\d,]+)<\/span>")
                match = re.findall(pattern, temp)

                resultMessage += "–¶–µ–Ω–∞ –≤–∞–ª—é—Ç—ã: " + ticker.upper() + ': ' + "%.2f" % float(str(match[0])
                                                                                         .replace(',', '.')) + symbol \
                                 + '\n'
                resultMessage += "–î–≤–∏–∂–µ–Ω–∏–µ —Ü–µ–Ω—ã –∑–∞ –¥–µ–Ω—å: " + str(plOrMin[0][0][0]) + str(plOrMin[0][1]).replace('‚ÄØ‚ÄØ', '') + '\n'
            else:
                urlOfTicker = "https://invest.yandex.ru/catalog/stock/" + ticker

                html = requests.get(urlOfTicker, headers)

                soup = BeautifulSoup(html.content, 'html.parser')
                isLot = soup.find('span', {'class': 'bxGayARGKhq9SK26MnEt'}).get_text()
                PriceNow = soup.find('span', {'class': 'bolbtRDz491tDq6jfmHd'}).get_text()
                result = ''
                Currency = soup.find('span', {'class': 's_OEpI6WApP0emKfb__p'}).get_text()
                if isLot == '–£–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ –æ¬†—Ñ–æ–Ω–¥–∞—Ö':
                    PriceNow = soup.find('span', {'class': 'bolbtRDz491tDq6jfmHd'}).get_text()
                    temp = ("".join(PriceNow.split()))
                    temp = temp.replace(',', '.')
                    result = (temp + Currency)
                else:
                    temp = ("".join(PriceNow.split()))
                    temp = temp.replace(',', '.')
                    result = (str(round(float(temp) / 10, 1)) + Currency)

                PercentIntraday = soup.find('div', {'class': 'rzv7e6OPChq71rCQBr9H'}).get_text()
                pattern = re.compile("([\d,]+)‚ÄØ‚ÄØ%")
                match = re.findall(pattern, PercentIntraday)
                temp = ''.join(match)
                temp = temp.replace(',', '.')
                resultMessage += "–¶–µ–Ω–∞ –∞–∫—Ü–∏–π " + ticker.upper() + ": " + result + '\n'
                resultMessage += "–î–≤–∏–∂–µ–Ω–∏–µ —Ü–µ–Ω—ã –∑–∞ —Å–µ–≥–æ–¥–Ω—è: " + PercentIntraday[0] + temp + " %" + '\n'

                Prognoz = soup.find('dd', {'class': '_6TCcuJ2ARzl_p6vbOa2'}).get_text()
                resultMessage += "–ö–æ–Ω—Å–µ–Ω—Å—É—Å –ø—Ä–æ–≥–Ω–æ–∑: " + Prognoz + '\n'

                PrognozPercent = soup.findAll('dd', {'class': '_6TCcuJ2ARzl_p6vbOa2'})
                temp = str(PrognozPercent)
                pattern = re.compile(
                    "<dd class=\"_6TCcuJ2ARzl_p6vbOa2\">([\d,‚ÄØ‚ÄØ‚ÇΩ|$]+)<div class=\"rzv7e6OPChq71rCQBr9H SUCnYTT5LFAlaqfSzDh5 mq6wSvRObYLvnnJqmh5Q\">")
                match = re.findall(pattern, temp)
                resultMessage += "–ü—Ä–æ–≥–Ω–æ–∑–∏—Ä—É–µ–º–∞—è —Ü–µ–Ω–∞ " + str(match[0]).replace(',', '.') + '\n'

                PrognozPercent = soup.find('div',
                                           {
                                               'class': 'rzv7e6OPChq71rCQBr9H SUCnYTT5LFAlaqfSzDh5 mq6wSvRObYLvnnJqmh5Q'}).get_text()
                temp = PrognozPercent.replace('‚ÄØ‚ÄØ', '').replace(',', '.')
                resultMessage += "–ü—Ä–æ–≥–Ω–æ–∑–∏—Ä—É–µ–º—ã–π –ø—Ä–æ—Ü–µ–Ω—Ç —Ä–æ—Å—Ç–∞: " + temp
            await bot.send_message(chat_id=message.chat.id, text=resultMessage)
        except Exception as e:
                await bot.send_message(chat_id=message.chat.id, text='–ù–µ –≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.')

@dp.message_handler(commands=['set'])
async def set_default_commands(dp):
    await dp.bot.set_my_commands([
        types.BotCommand("all", "–ü–∏–Ω–≥–∞–Ω–µ–º –≤—Å–µ—Ö!"),
        types.BotCommand("bibometr", "–ü–æ–º–µ—Ä—è–µ–º —Ç–≤–æ–π —Å—Ç—Ä—É—á–æ–∫"),
        types.BotCommand("tiktokLink", "–í—ã–≥—Ä—É–∑–∏–º —Ç–∏–∫—Ç–æ–∫ –≤ –¥–∞–Ω–Ω—ã–π —á–∞—Ç"),
    ])



if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    executor.start_polling(dp, skip_updates=True)
